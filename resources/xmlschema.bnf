schema = os '<' xs 'schema' any-attributes '>' 
		 ((include|import|redefine|annotation)*,(((simpleType|complexType|
		 group|attributeGroup)|element|attribute|notation),annotation*)*)
		 '</' xs 'schema>' os
include = os '<' xs 'include' 
		 any-attributes  
		 (end | ('>' annotation? '</' xs 'import>')) os 
import = os '<' xs 'import'
		 any-attributes  
		 (end | ('>' annotation? '</' xs 'import>')) os 
redefine = os '<' xs 'redefine' space 'schemaLocation=' strLit any-attributes 
		   (end | ('>' (annotation?|(simpleType|complexType|group|attributeGroup))* 
		   '</' xs 'redefine>')) os 	   
notation = os '<' xs 'notation' space name-attr space 'public=' strLit any-attributes 
		   (end | ('>' annotation? '</' xs 'notation>')) os 	   
app-info = os '<' xs 'appinfo>' string '</' xs 'appinfo>' os 
documentation = os '<' xs 'documentation xml:lang=' strLit '>' os string os '</' xs 'documentation>' os  
annotation = os '<' xs 'annotation' any-attributes '>' os (app-info | documentation)* '</' xs 'annotation>' os
choice = os '<' xs 'choice' any-attributes '>' 
		 (annotation?,(element|group|choice|sequence|any)*) 
		 '</' xs 'choice>' os
element = typed-element | embedded-element
typed-element = os '<' xs 'element' space name-attr space 'type=' strLit any-attributes 
				(('>' '</' xs 'element>') | end) os
embedded-element = os '<' xs 'element' space name-attr any-attributes  
	 			   (end | ('>' annotation?,(simpleType|complexType)?,(unique|key|keyref)* 
	 			   '</' xs 'element>')) os 
unique = os '<' xs 'unique' space name-attr any-attributes
	 	 (end | ('>' (annotation?,(selector,field+)) '</' xs 'unique>')) os 

key = os '<' xs 'key' name-attr any-attributes '>'
      (annotation?,(selector,field+)) 
	  '</' xs 'key>' os
selector = os '<' xs 'selector' space 'xpath=' strLit any-attributes '>'
      annotation? 
	 (end | ('>' annotation? '</' xs 'selector>')) os 
field = os '<' xs 'field' space 'xpath=' strLit any-attributes '>'
      annotation? 
	 (end | ('>' annotation? '</' xs 'field>')) os 
	  
keyref = os '<' xs 'keyref' name-attr any-attributes '>'
      (annotation?,(selector,field+)) 
	  '</' xs 'keyref>' os

named-simpleType = os '<' xs 'simpleType ' name-attr any-attributes '>' 
				   simpleType-content '</' xs 'simpleType>' os 
simpleType = os '<' xs 'simpleType' any-attributes '>' 
			 simpleType-content  '</' xs 'simpleType>' os
simpleType-content = (annotation? (simpleType-restriction| list| union))
named-complexType = os '<' xs 'complexType' space name-attr (space mixed-attr)? any-attributes '>' 
                    complex-type-content 
                    '</' xs 'complexType>' os
complexType = os '<' xs 'complexType' (space mixed-attr)? any-attributes '>' 
			  complex-type-content 
		      '</' xs 'complexType>' os
complex-type-content = (annotation?,(simpleContent|complexContent|((group|all|
					    choice|sequence)?,((attribute|attributeGroup)*,anyAttribute?))))
named-group = os '<' xs 'group' space name-attr (space min-occurs-attr)? 
			  (space max-occurs-attr)? any-attributes '>' 
			  (annotation?,(all|choice|sequence)?) 
			  '</' xs 'group>' os 
ref-group = os '<' xs 'group ref=' strLit any-attributes end os
group = named-group | ref-group
any = os '<' xs 'any' any-attributes
		 (end | ('>' annotation? '</' xs 'any>')) os 
 
anyAttribute = os '<' xs 'anyAttribute' any-attributes 
		 	   (end | ('>' annotation? '</' xs 'anyAttribute>')) os 
attributeGroup = named-attribute-group | ref-attribute-group
named-attribute-group = os '<' xs 'attributeGroup' space name-attr any-attributes 
						(end | ('>' annotation? (attribute|attributeGroup)* anyAttribute? 
						'</' xs 'attributeGroup>')) os 
ref-attribute-group = os '<' xs 'attributeGroup' space 'ref=' strLit any-attributes 
					  (end | ('>' annotation? '</' xs 'attributeGroup>')) os 
any-attributes = (space string '=' strLit)*
complexContent = os '<' xs 'complexContent' any-attributes '>' 
				 (annotation?,(complexContent-restriction|extension)) 
				 '</' xs 'complexContent>' os
simpleContent = os '<' xs 'simpleContent' any-attributes '>' 
				(annotation?,(extension | simpleType-restriction)) 
				'</' xs 'simpleContent>' os
extension = os '<' xs 'extension base=' strLit any-attributes '>' 
					(annotation?,((group|all|choice|sequence)?,
					((attribute|attributeGroup)*,anyAttribute?))) 
					'</' xs 'extension>' os
all = os '<' xs 'all' any-attributes '>' annotation? element* '</' xs 'all>' os
sequence = os '<' xs 'sequence' any-attributes '>' 
		   annotation?,(element|group|choice|sequence|any)* 
		   '</' xs 'sequence>' os
union = os '<' xs 'union memberTypes=' strLit any-attributes
		(end | ('>' (annotation?,(simpleType*)) '</' xs 'union>')) os 	   

typed-list = os '<' xs 'list itemType=' strLit any-attributes 
	         end os
embedded-list = os '<' xs 'list' any-attributes  
		 (end | ('>' (annotation?,(simpleType?)) '</' xs 'list>')) os 	   
list = embedded-list | typed-list	    
simpleType-restriction = os '<' xs 'restriction base=' strLit any-attributes '>' 
                         (annotation?,(simpleType?,(minExclusive|minInclusive|
						  maxExclusive|maxInclusive|totalDigits|fractionDigits|
						  length|minLength|maxLength|enumeration|whiteSpace|pattern)*)) 
                         '</' xs 'restriction>' os
simpleContent-restriction = os '<' xs 'restriction base=' strLit any-attributes '>' os 
						(annotation?,(simpleType?,(minExclusive |minInclusive|
						maxExclusive|maxInclusive|totalDigits|fractionDigits|
						length|minLength|maxLength|enumeration|whiteSpace|pattern)*)?,
						((attribute|attributeGroup)*,anyAttribute?))
                        '</' xs 'restriction>' os
complexContent-restriction = os '<' xs 'restriction base=' strLit any-attributes '>'
							 (annotation?,(group|all|choice|sequence)?,
							 ((attribute|attributeGroup)*,anyAttribute?))
							 '</' xs 'restriction>' os                         
typed-attribute = os '<' xs 'attribute' space name-attr space 'type=' strLit 
				  (use-attr | default-attr | fixed-attr)? any-attributes 
		 		  (end | ('>' annotation? '</' xs 'attribute>')) os 
embedded-attribute = os '<' xs 'attribute' space name-attr any-attributes '>' 
					 annotation? simpleType? 
					 '</' xs 'attribute>' os
ref-attribute = os '<' xs 'attribute' space 'ref=' strLit any-attributes
		 		  (end | ('>' annotation? '</' xs 'attribute>')) os 
attribute = typed-attribute | embedded-attribute | ref-attribute
fractionDigits = os '<' xs 'fractionDigits' space 'value=' '\"' decimalLit '\"' any-attributes 
	 		  	 (end | ('>' annotation? '</' xs 'fractionDigits>')) os 
totalDigits = os '<' xs 'totalDigits' space 'value=' '\"' decimalLit '\"' any-attributes 
	 		  	 (end | ('>' annotation? '</' xs 'totalDigits>')) os 
whiteSpace = os '<' xs 'whiteSpace value=' (preserve | replace | collapse) 
	 		 (end | ('>' annotation? '</' xs 'whiteSpace>')) os 
minInclusive = os '<' xs 'minInclusive value=' '\"' decimalLit '\"' 
                         (('>' '</' xs 'minInclusive>') | end) os
maxInclusive = os '<' xs 'maxInclusive value=' '\"' decimalLit '\"' (('>' '</' xs 'maxInclusive>') | end) os
minExclusive = os '<' xs 'minExclusive value=' '\"' decimalLit '\"' (('>' '</' xs 'minExclusive>') | end) os
maxExclusive = os '<' xs 'maxExclusive value=' '\"' decimalLit '\"' (('>' '</' xs 'maxExclusive>') | end) os
enumeration = os '<' xs 'enumeration value=' strLit 
              (('>' '</' xs 'enumeration>') | end) os
          
length = os '<' xs 'length value=' '\"' decimalLit '\"' 
         (('>' '</' xs 'length>') | end) os
minLength = os '<' xs 'minLength value=' '\"' decimalLit '\"' 
            (('>' '</' xs 'minLength>') | end) os
maxLength = os '<' xs 'maxLength value=' '\"' decimalLit '\"' 
            (('>' '</' xs 'maxLength>') | end) os
pattern = os '<' xs 'pattern value=' strLit 
          (('>' '</' xs 'pattern>') | end) os
name-attr = 'name=' strLit
mixed-attr = 'mixed=' (true | false)
use-attr = 'use=' required | optional
fixed-attr = 'fixed=' strLit
default-attr = 'default=' strLit
min-occurs-attr = 'minOccurs=' '\"' decimalLit '\"' 
max-occurs-attr = 'maxOccurs=' '\"' decimalLit '\"' 
true = '\"true\"'
false = '\"false\"'
preserve = '\"preserve\"'
replace = '\"replace\"'
collapse = '\"collapse\"'
required = '\"required\"'
optional = '\"optional\"'
string-type = '\"' xs 'string' '\"'  
xs = ('xs' ':') | '' 
end = '/>'
decimalLit = ('+' | '-')? decimalDigit*
decimalDigit = #'[0-9]'
strLit = <'\"'> { charValue } <'\"'>
string = charValue*  
charValue = #"[^\n]"
space = <#'[ \t\n,]+'>
os = <#'[ \t\n]*'>



